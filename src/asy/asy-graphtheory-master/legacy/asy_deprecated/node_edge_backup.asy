// connect nodes with a line
path operator--(node nd1, node nd2)
{
	path g1=shift(nd1.pos)*nd1.outline;
	path g2=shift(nd2.pos)*nd2.outline;
	// pair c1=(max(g1)+min(g1))/2;
	// pair c2=(max(g2)+min(g2))/2;
	pair c1=nd1.pos;
	pair c2=nd2.pos;
	path edge = c1--c2;
	edge=firstcut(edge, g1).after;
	edge=lastcut(edge, g2).before;
	return edge;
}

// edgeconnector typedef
typedef path edgeconnector(node nd1, node nd2);
// function type generated by one node
typedef path edgemaker(node nd);

// edgeconnector for curve
// first half of  nd1..con..nd2
edgemaker operator..(node nd, edgeconnector con)
{
	return new path(node nd2)
	{
		return con(nd, nd2);
	};
}
// last half of nd1..con..nd2
path operator..(edgemaker maker, node nd)
{
	return maker(nd);
}
// for nd1..loop(dir)
path operator..(node nd, edgemaker maker)
{
	return maker(nd);
}
// edgeconnector for line
// first half of  nd1--con--nd2
edgemaker operator--(node nd, edgeconnector con)
{
	return new path(node nd2)
	{
		return con(nd, nd2);
	};
}
// last half of nd1--con--nd2
path operator--(edgemaker maker, node nd)
{
	return maker(nd);
}

// edgeconnector definition for curves
// edgeconnector for two nodes with a bended curve
edgeconnector bend(real ang)
{
	return new path(node nd1, node nd2)
	{
		// path g1=shift(nd1.pos)*nd1.outline;
		// path g2=shift(nd2.pos)*nd2.outline;
		// pair c1=(max(g1)+min(g1))/2;
		// pair c2=(max(g2)+min(g2))/2;
		pair c1=nd1.pos;
		pair c2=nd2.pos;
		real deg=degrees(c2-c1);
		return nd1.angle(deg-ang){dir(deg-ang)}
			..{dir(deg+ang)}nd2.angle(180+deg+ang);
	};
}

edgeconnector bendright=bend(30);
edgeconnector bendleft=bend(-30);
edgeconnector bend=bendright;

// edgemaker for loop
edgemaker loop(pair direction, real ang=60, real ratio=1.5)
{
	return new path(node nd)
	{
		real deg=degrees(direction);
		real ang1=deg-ang/2, ang2=deg+ang/2;
		pair mid=nd.angle(deg)
			+ratio*fontsize(currentpen)*unit(direction);
		return nd.angle(ang1){dir(ang1)}..mid
			..{-dir(ang2)}nd.angle(ang2);
	};
}

// edgeconnector definition for lines
path HV(node nd1, node nd2)
{
	path g1=shift(nd1.pos)*nd1.outline;
	path g2=shift(nd2.pos)*nd2.outline;
	// pair c1=(max(g1)+min(g1))/2;
	// pair c2=(max(g2)+min(g2))/2;
	pair c1=nd1.pos;
	pair c2=nd2.pos;
	path edge = c1--(c2.x,c1.y)--c2;
	edge=firstcut(edge, g1).after;
	edge=lastcut(edge, g2).before;
	return edge;
}

path VH(node nd1, node nd2)
{
	path g1=shift(nd1.pos)*nd1.outline;
	path g2=shift(nd2.pos)*nd2.outline;
	// pair c1=(max(g1)+min(g1))/2;
	// pair c2=(max(g2)+min(g2))/2;
	pair c1=nd1.pos;
	pair c2=nd2.pos;
	path edge = c1--(c1.x,c2.y)--c2;
	edge=firstcut(edge, g1).after;
	edge=lastcut(edge, g2).before;
	return edge;
}

// function on path
typedef path fpath(path);

path operator@(path p, fpath t)
{
	return t(p);
}

// fpath: shorten
fpath shorten(real pre=0, real post=2)
{
	return new path(path p)
	{
		return subpath(p, arctime(p,pre), arctime(p, arclength(p)-post));
	};
}

fpath shorten=shorten(0,2);

